import classNames from 'classnames';
import Select from 'react-select';
import { Button, Label, Modal, TextInput } from 'flowbite-react';
import translations from '../../utils/translations';
import {
  getQuestionCategoryFromTableName,
  isBlank,
  toQuestionOptions
} from '../../utils/common';
import {
  addIndex,
  always,
  append,
  applySpec,
  compose,
  curry,
  equals,
  filter,
  flip,
  has,
  head,
  identity,
  ifElse,
  includes,
  is,
  isNil,
  keys,
  map,
  mapObjIndexed,
  nthArg,
  path,
  pathOr,
  prop,
  propOr,
  split,
  values,
  propEq,
  last,
  __,
  reject,
  omit,
  not,
  length,
  unless,
  when
} from 'ramda';
import { log, tapLog } from '../../utils/log';
import questions from '../../utils/questions';
import { useEffect, useState } from 'react';
import { ColumnSample, Option } from '../../interfaces';
import useSagaDispatch from "../../hooks/useSagaDispatch";
import { SamplesState } from '../../store/reducers/samples';

const translateCategory = compose(
  flip(path)(translations),
  flip(append)(['column_samples', 'categories'])
);

const translationOperator = compose(
  flip(path)(translations),
  flip(append)(['column_samples', 'operators'])
);

const translationApplicationOption = compose(
  flip(path)(translations),
  flip(append)(['column_samples', 'applications'])
);

const toCategoryOptions = ifElse(
  isNil,
  always([]),
  compose(
    values,
    mapObjIndexed(
      applySpec({
        value: nthArg(1),
        label: compose(translateCategory, nthArg(1))
      })
    )
  )
);

const toOperatorOptions = map(
  applySpec({
    label: translationOperator,
    value: identity
  })
);

const showQuestionByKeys = (questions: string[]) =>
  filter(compose(flip(includes)(questions), prop('value')));

const showQuestionByColumnSampleQuestions = compose(
  showQuestionByKeys,
  prop('questions')
);

const toAnswerOptions = (sample: ColumnSample) =>
  compose(
    showQuestionByColumnSampleQuestions(sample),
    toQuestionOptions,
    prop('table')
  )(sample);

const toApplicationOptions = compose(
  map(
    applySpec({
      value: identity,
      label: translationApplicationOption
    })
  ),
  pathOr([], ['applications', 'options'])
);

const columnCombined = compose(split('.'), propOr('', 'column'));

const isTempCondition = has('temp');

const onValueChange = ifElse(
  has('value'),
  compose(prop('value'), nthArg(0)),
  path(['target', 'value'])
);

interface QueryCondition {
  id: number;
  column: string;
  operator: string;
  value: string;
}

const Summary = ({ count, setCount, columnSample, conditions, newCondition, editCondition }) => {
  const isCategoryApplication = compose(equals('applications'), head);
  const questionCategory = compose(
    getQuestionCategoryFromTableName,
    propOr('', 'table')
  )(columnSample);

  const toConditionSection = (
    condition: QueryCondition,
    total: number,
    index: number
  ) => {
    const columnCombinedArray = columnCombined(condition);
    return (
      <>
        <div
          className="p-5 duration-300 transform bg-white border rounded shadow-sm cursor-pointer hover:-translate-y-2"
          onClick={flip(editCondition)(condition)}
        >
          <div className="flex items-center justify-between mb-2">
            <p className="text-lg font-bold leading-5">
              {compose(translateCategory, head)(columnCombinedArray)}
            </p>
            <p className="flex items-center justify-center w-6 h-6 font-bold rounded text-deep-purple-accent-400 bg-indigo-50">
              {index + 1}
            </p>
          </div>
          <p className="text-left text-sm text-gray-900">
            "
            <span className="">
              {ifElse(
                isCategoryApplication,
                compose(translationApplicationOption, last),
                compose(
                  flip(path)(questions),
                  flip(append)([questionCategory]),
                  last
                )
              )(columnCombinedArray)}
            </span>
            "
            <span className="ml-1 font-bold">
              {compose(translationOperator, prop('operator'))(condition)}
            </span>
            <span className="ml-1 italic">{prop('value', condition)}</span>
          </p>
        </div>
        {index === total - 1 || (
          <div className="inline-flex items-center justify-center w-full">
            <hr className="w-64 h-px my-2 bg-gray-200 border-0 dark:bg-gray-700" />
            <span className="absolute px-3 font-medium text-gray-900 -translate-x-1/2 bg-white left-1/2 dark:text-white dark:bg-gray-900">
              or
            </span>
          </div>
        )}
      </>
    );
  };

  const ConditionSection = curry(toConditionSection)(
    __,
    length(conditions),
    __
  );
  return (
    <div className="p-4 mx-auto">
      <div className="relative mb-5">
        <TextInput
          onChange={compose(setCount, onValueChange)}
          defaultValue={count}
          type="number"
          placeholder="Count"
          required={true}
          max={prop('remaining', columnSample)}
          min={1}
        />
      </div>
    
      <div className="relative grid gap-4 row-gap-5">
        <>
          {addIndex(map)(ConditionSection)(conditions)}
          <div className="bg-white border rounded shadow-sm cursor-pointer">
            <p className="text-center text-lg font-bold leading-5">
              <a className="block p-3" href="#" onClick={newCondition}>
                Add
              </a>
            </p>
          </div>
        </>
      </div>
    </div>
  );
};

const Form = ({ columnSample, adjustment, condition, updateCondition }) => {
  const columnCombinedArray = columnCombined(condition);
  const [category, setCategory] = useState<string | undefined>(
    head(columnCombinedArray)
  );
  const update = curry(updateCondition);
  const categoryOptions = toCategoryOptions(adjustment);
  const questionOptions = ifElse(
    isBlank,
    always([]),
    ifElse(
      equals('answers'),
      always(toAnswerOptions(columnSample)),
      always(toApplicationOptions(adjustment))
    )
  )(category);
  const operatorOptions = compose(
    toOperatorOptions,
    pathOr([], [category, 'operators'])
  )(adjustment);
  const getInitialOption = (options: Option[], val: string) =>
    compose(curry(filter)(__, options), curry(propEq)('value'))(val);

  const curriedInitialOption = curry(getInitialOption);

  log('questionOptions')(questionOptions);

  return (
    <form className="flex flex-col gap-4 text-left">
      <div>
        <div className="mb-2 block">
          <Label htmlFor="category" value="Category" />
        </div>
        <Select
          defaultValue={compose(
            curriedInitialOption(categoryOptions),
            head
          )(columnCombinedArray)}
          onChange={compose(setCategory, onValueChange)}
          options={categoryOptions}
        />
      </div>
      <div>
        <div className="mb-2 block">
          <Label htmlFor="question" value="Question" />
        </div>
        <Select
          defaultValue={compose(
            curriedInitialOption(questionOptions),
            last
          )(columnCombinedArray)}
          onChange={compose(
            update('column'),
            (val: string) => `${category}.${val}`,
            onValueChange
          )}
          options={questionOptions}
        />
      </div>
      <div>
        <div className="mb-2 block">
          <Label htmlFor="operator" value="Operator" />
        </div>
        <Select
          defaultValue={compose(
            curriedInitialOption(operatorOptions),
            prop('operator')
          )(condition)}
          onChange={compose(update('operator'), onValueChange)}
          options={operatorOptions}
        />
      </div>
      <div>
        <div className="mb-2 block">
          <Label htmlFor="value" value="Value" />
        </div>
        <TextInput
          defaultValue={prop('value', condition)}
          onChange={compose(update('value'), onValueChange)}
          type="text"
          required={true}
        />
      </div>
    </form>
  );
};

const SummaryActions = ({ loading, submit, close }) => (
  <>
    <Button disabled={loading} onClick={submit}>
      {loading && (
        <svg
          aria-hidden="true"
          role="status"
          className="inline w-4 h-4 mr-3 text-white animate-spin"
          viewBox="0 0 100 101"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
            fill="#E5E7EB"
          />
          <path
            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
            fill="currentColor"
          />
        </svg>
      )}
      Create
    </Button>
    <Button disabled={loading} color="gray" onClick={close}>
      Close
    </Button>
  </>
);

const EditConditionActions = ({ confirm, back, remove }) => (
  <>
    <Button onClick={confirm}>Confirm</Button>
    <Button color="gray" onClick={back}>
      Back
    </Button>
    {isNil(remove) || (
      <Button color="failure" onClick={remove}>
        Remove
      </Button>
    )}
  </>
);

export default ({ show, adjustment, columnSample, close }) => {
  const { dispatch, state } = useSagaDispatch<SamplesState>('samples');
  const { 
    adjusting,
  } = state;
  const [conditions, setConditions] = useState<QueryCondition[]>([
    {
      column: 'answers.application_awareness_channel',
      id: 1682055539743,
      operator: 'like',
      value: 'prof'
    }
  ]);
  const [selectedCondition, setSelectedCondition] = useState<
    QueryCondition | undefined
  >(undefined);
  const [count, setCount] = useState<number>(1);

  const adjust = () => {
    dispatch(
      'adjust',
      { uid: columnSample.uid, data: { action: 'create', queries: map(omit(['id']))(conditions), count } }
    );
  };
  const closeAfterAdjusting = unless(identity<boolean>, close);
  useEffect(() => { closeAfterAdjusting(adjusting) }, [adjusting]);

  const newCondition = (e: MouseEvent) => {
    e.preventDefault();
    const res = {
      id: new Date().getTime(),
      column: '',
      operator: '',
      value: '',
      temp: true
    };
    compose(setConditions, flip(append)(conditions))(res);
    setSelectedCondition(res);
  };
  const removeCondition = (conditions: QueryCondition[], id: number) =>
    compose(
      setConditions,
      tapLog('conditions'),
      reject(propEq('id', id))
    )(conditions);
  const clearCondition = (e: MouseEvent) => {
    e.preventDefault();
    if (isTempCondition(selectedCondition)) {
      removeCondition(conditions, selectedCondition.id);
    }
    setSelectedCondition(undefined);
  };
  const editCondition = (e: MouseEvent, condition: QueryCondition) => {
    e.preventDefault();
    setSelectedCondition(condition);
  };
  const confirmCondition = (e: MouseEvent) => {
    e.preventDefault();
    log('selectedCondition')(selectedCondition);
    compose(
      setConditions,
      map(
        ifElse(
          propEq('id', selectedCondition.id),
          always(omit(['temp'], selectedCondition)),
          identity
        )
      )
    )(conditions);
    setSelectedCondition(undefined);
  };
  const updateCondition = (attr: string, val: string) =>
    (selectedCondition[attr] = val);
  const deleteCondition = (e: MouseEvent) => {
    removeCondition(conditions, selectedCondition.id);
    clearCondition(e);
  };

  return (
    <div
      aria-hidden="false"
      data-testid="modal"
      role="dialog"
      className={classNames(
        'fixed top-0 right-0 left-0 z-50 h-modal overflow-y-auto overflow-x-hidden md:inset-0 md:h-full items-center justify-center flex bg-gray-900 bg-opacity-50 dark:bg-opacity-80',
        { hidden: !show }
      )}
    >
      <div className="relative h-full w-full p-4 md:h-auto max-w-2xl">
        <div className="relative rounded-lg bg-white shadow dark:bg-gray-700">
          <div className="flex items-start justify-between rounded-t dark:border-gray-600 border-b p-5">
            <h3 className="text-xl font-medium text-gray-900 dark:text-white">
              Bulk Create Entries
            </h3>
            <button
              aria-label="Close"
              className="ml-auto inline-flex items-center rounded-lg bg-transparent p-1.5 text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white"
              type="button"
              onClick={close}
            >
              <svg
                stroke="currentColor"
                fill="none"
                stroke-width="2"
                viewBox="0 0 24 24"
                aria-hidden="true"
                className="h-5 w-5"
                height="1em"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                ></path>
              </svg>
            </button>
          </div>
          <div className="p-6">
            {ifElse(
              isNil,
              always(
                <Summary
                  count={count}
                  setCount={compose(setCount, parseInt)}
                  columnSample={columnSample}
                  conditions={conditions}
                  newCondition={newCondition}
                  editCondition={editCondition}
                />
              ),
              always(
                <Form
                  adjustment={adjustment}
                  columnSample={columnSample}
                  condition={selectedCondition}
                  updateCondition={updateCondition}
                />
              )
            )(selectedCondition)}
          </div>
          <div className="flex items-center space-x-2 rounded-b border-gray-200 p-6 dark:border-gray-600 border-t">
            {ifElse(
              isNil,
              always(
                <SummaryActions
                  loading={adjusting}
                  submit={adjust}
                  close={close}
                />
              ),
              always(
                <EditConditionActions
                  confirm={confirmCondition}
                  back={clearCondition}
                  remove={ifElse(
                    isTempCondition,
                    always(undefined),
                    always(deleteCondition)
                  )(selectedCondition)}
                />
              )
            )(selectedCondition)}
          </div>
        </div>
      </div>
    </div>
  );
};
